psql -h localhost -p 5432 -U postgres -d postgres

CREATE TABLE departments (
    dept_id SERIAL PRIMARY KEY,
    dept_name VARCHAR(100) NOT NULL,
    manager_name VARCHAR(100),
    budget DECIMAL(10,2)
);

CREATE TABLE employees (
    emp_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    position VARCHAR(100),
    salary DECIMAL(10, 2),
    hire_date DATE DEFAULT CURRENT_DATE,
    dept_id INTEGER NOT NULL,
    FOREIGN KEY (dept_id) REFERENCES departments(dept_id) ON DELETE RESTRICT
);

CREATE TABLE blog_posts (
    post_id SERIAL PRIMARY KEY,
    title VARCHAR(200) NOT NULL,
    content TEXT,
    author VARCHAR(100),
    published_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE comments (
    comment_id SERIAL PRIMARY KEY,
    post_id INTEGER NOT NULL,
    commenter_name VARCHAR(100),
    comment_text TEXT NOT NULL,
    comment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES blog_posts (post_id) ON DELETE CASCADE
);

CREATE TABLE students (
    student_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    enrollment_date DATE DEFAULT CURRENT_DATE
);

CREATE TABLE courses (
    course_id SERIAL PRIMARY KEY,
    course_code VARCHAR(10) UNIQUE NOT NULL,
    course_name VARCHAR(100) NOT NULL,
    credits INTEGER NOT NULL,
    instructor VARCHAR(100)
);

CREATE TABLE student_enrollments (
    enrollment_id SERIAL PRIMARY KEY,
    student_id INTEGER NOT NULL,
    course_id INTEGER NOT NULL,
    enrollment_date DATE DEFAULT CURRENT_DATE,
    grade CHAR(2),
    FOREIGN KEY (student_id) REFERENCES students(student_id) ON DELETE CASCADE,
    FOREIGN KEY (course_id) REFERENCES courses(course_id) ON DELETE CASCADE,
    UNIQUE(student_id, course_id)
);

INSERT INTO departments (dept_name, manager_name, budget) VALUES
    ('Engineering Department', 'Aibek Zhumanov', 500000.00),
    ('Marketing Department', 'Bakyt Toktosunov', 200000.00);

INSERT INTO employees (first_name, last_name, position, salary, dept_id) VALUES
    ('Erlan', 'Bekov', 'Software Engineer', 75000.00, 1),
    ('Aigul', 'Imanova', 'Senior Developer', 85000.00, 1),
    ('Ruslan', 'Kaliev', 'DevOps Engineer', 80000.00, 1);

INSERT INTO blog_posts (title, content, author) VALUES
    ('First Post', 'Welcome to our blog!', 'Aibek Zhumanov'),
    ('New Features', 'We have added new functionalities!', 'Aigul Imanova');

INSERT INTO comments (post_id, commenter_name, comment_text) VALUES
    (1, 'Nursultan', 'Great post!'),
    (1, 'Aliya', 'Thanks for the useful info!'),
    (2, 'Kanikey', 'Looking forward to more updates!');

INSERT INTO students (first_name, last_name, email) VALUES
    ('Aizada', 'Turdalieva', 'at@university.edu'),
    ('Bolot', 'Sydykov', 'bs@university.edu'),
    ('Chyngyz', 'Orozaliev', 'co@university.edu');

INSERT INTO courses (course_code, course_name, credits, instructor) VALUES
    ('CS101', 'Introduction to Programming', 3, 'Dr. Adilet'),
    ('CS201', 'Data Structures', 4, 'Dr. Erkin'),
    ('MATH101', 'Calculus I', 4, 'Dr. Nazgul');

INSERT INTO student_enrollments (student_id, course_id, grade) VALUES
    (1, 1, 'A'),
    (1, 2, 'B+'),
    (2, 1, 'A-'),
    (2, 3, 'B'),
    (3, 2, 'A'),
    (3, 3, 'A-');

SELECT
    s.first_name || ' ' || s.last_name AS student_name,
    c.course_code,
    c.course_name,
    se.grade,
    se.enrollment_date
FROM students s
JOIN student_enrollments se ON s.student_id = se.student_id
JOIN courses c ON se.course_id = c.course_id
ORDER BY s.last_name, c.course_code;

SELECT s.first_name, s.last_name, se.grade
FROM students s
JOIN student_enrollments se ON s.student_id = se.student_id
JOIN courses c ON se.course_id = c.course_id
WHERE c.course_code = 'CS101';

SELECT c.course_code, c.course_name, c.credits, se.grade
FROM courses c
JOIN student_enrollments se ON c.course_id = se.course_id
JOIN students s ON se.student_id = s.student_id
WHERE s.email = 'at@university.edu';
